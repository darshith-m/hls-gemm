// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gemm_kernel_gemm_kernel_Pipeline_WRITE_RESULT_VITIS_LOOP_66_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY,
        m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY,
        m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST,
        m_axi_gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID,
        m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP,
        m_axi_gmem2_0_BID,
        m_axi_gmem2_0_BUSER,
        C_block_address0,
        C_block_ce0,
        C_block_q0,
        empty,
        C,
        zext_ln31
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem2_0_AWVALID;
input   m_axi_gmem2_0_AWREADY;
output  [63:0] m_axi_gmem2_0_AWADDR;
output  [0:0] m_axi_gmem2_0_AWID;
output  [31:0] m_axi_gmem2_0_AWLEN;
output  [2:0] m_axi_gmem2_0_AWSIZE;
output  [1:0] m_axi_gmem2_0_AWBURST;
output  [1:0] m_axi_gmem2_0_AWLOCK;
output  [3:0] m_axi_gmem2_0_AWCACHE;
output  [2:0] m_axi_gmem2_0_AWPROT;
output  [3:0] m_axi_gmem2_0_AWQOS;
output  [3:0] m_axi_gmem2_0_AWREGION;
output  [0:0] m_axi_gmem2_0_AWUSER;
output   m_axi_gmem2_0_WVALID;
input   m_axi_gmem2_0_WREADY;
output  [31:0] m_axi_gmem2_0_WDATA;
output  [3:0] m_axi_gmem2_0_WSTRB;
output   m_axi_gmem2_0_WLAST;
output  [0:0] m_axi_gmem2_0_WID;
output  [0:0] m_axi_gmem2_0_WUSER;
output   m_axi_gmem2_0_ARVALID;
input   m_axi_gmem2_0_ARREADY;
output  [63:0] m_axi_gmem2_0_ARADDR;
output  [0:0] m_axi_gmem2_0_ARID;
output  [31:0] m_axi_gmem2_0_ARLEN;
output  [2:0] m_axi_gmem2_0_ARSIZE;
output  [1:0] m_axi_gmem2_0_ARBURST;
output  [1:0] m_axi_gmem2_0_ARLOCK;
output  [3:0] m_axi_gmem2_0_ARCACHE;
output  [2:0] m_axi_gmem2_0_ARPROT;
output  [3:0] m_axi_gmem2_0_ARQOS;
output  [3:0] m_axi_gmem2_0_ARREGION;
output  [0:0] m_axi_gmem2_0_ARUSER;
input   m_axi_gmem2_0_RVALID;
output   m_axi_gmem2_0_RREADY;
input  [31:0] m_axi_gmem2_0_RDATA;
input   m_axi_gmem2_0_RLAST;
input  [0:0] m_axi_gmem2_0_RID;
input  [8:0] m_axi_gmem2_0_RFIFONUM;
input  [0:0] m_axi_gmem2_0_RUSER;
input  [1:0] m_axi_gmem2_0_RRESP;
input   m_axi_gmem2_0_BVALID;
output   m_axi_gmem2_0_BREADY;
input  [1:0] m_axi_gmem2_0_BRESP;
input  [0:0] m_axi_gmem2_0_BID;
input  [0:0] m_axi_gmem2_0_BUSER;
output  [7:0] C_block_address0;
output   C_block_ce0;
input  [31:0] C_block_q0;
input  [2:0] empty;
input  [63:0] C;
input  [8:0] zext_ln31;

reg ap_idle;
reg m_axi_gmem2_0_AWVALID;
reg m_axi_gmem2_0_WVALID;
reg m_axi_gmem2_0_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
reg   [0:0] first_iter_3_reg_366;
reg   [0:0] first_iter_3_reg_366_pp0_iter2_reg;
reg    ap_block_state4_io_grp1;
reg   [0:0] icmp_ln66_1_reg_370;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter8_reg;
reg    ap_block_state10_pp0_stage0_iter9_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln65_fu_165_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem2_blk_n_B;
wire    ap_block_pp0_stage0_grp1;
reg    gmem2_blk_n_W;
reg    gmem2_blk_n_AW;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [63:0] zext_ln31_cast_fu_143_p1;
reg   [63:0] zext_ln31_cast_reg_346;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln65_fu_200_p3;
reg   [4:0] select_ln65_reg_355;
wire   [3:0] empty_24_fu_216_p1;
reg   [3:0] empty_24_reg_360;
wire   [0:0] first_iter_3_fu_220_p2;
wire   [0:0] icmp_ln66_1_fu_232_p2;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter2_reg;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter3_reg;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter4_reg;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter5_reg;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter6_reg;
reg   [0:0] icmp_ln66_1_reg_370_pp0_iter7_reg;
reg   [63:0] gmem2_addr_reg_374;
reg   [31:0] C_block_load_reg_385;
wire   [63:0] zext_ln70_1_fu_306_p1;
wire  signed [63:0] sext_ln66_fu_280_p1;
reg    ap_block_pp0_stage0_01001_grp1;
reg   [4:0] j_fu_84;
wire   [4:0] add_ln66_fu_226_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_88;
wire   [4:0] select_ln65_1_fu_208_p3;
reg   [8:0] indvar_flatten20_fu_92;
wire   [8:0] add_ln65_1_fu_171_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten20_load;
wire    ap_block_pp0_stage0;
reg    C_block_ce0_local;
wire   [0:0] icmp_ln66_fu_194_p2;
wire   [4:0] add_ln65_fu_188_p2;
wire   [15:0] tmp_s_fu_248_p4;
wire   [63:0] p_cast7_fu_256_p1;
wire   [63:0] tmp1_fu_260_p2;
wire   [63:0] empty_25_fu_265_p2;
wire   [61:0] trunc_ln2_fu_270_p4;
wire   [7:0] tmp_1_fu_290_p3;
wire   [7:0] zext_ln70_fu_297_p1;
wire   [7:0] add_ln70_fu_300_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 j_fu_84 = 5'd0;
#0 i_fu_88 = 5'd0;
#0 indvar_flatten20_fu_92 = 9'd0;
#0 ap_done_reg = 1'b0;
end

gemm_kernel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_88 <= select_ln65_1_fu_208_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln65_fu_165_p2 == 1'd0))) begin
            indvar_flatten20_fu_92 <= add_ln65_1_fu_171_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_92 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_84 <= add_ln66_fu_226_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        C_block_load_reg_385 <= C_block_q0;
        first_iter_3_reg_366_pp0_iter2_reg <= first_iter_3_reg_366;
        gmem2_addr_reg_374 <= sext_ln66_fu_280_p1;
        icmp_ln66_1_reg_370_pp0_iter2_reg <= icmp_ln66_1_reg_370;
        icmp_ln66_1_reg_370_pp0_iter3_reg <= icmp_ln66_1_reg_370_pp0_iter2_reg;
        icmp_ln66_1_reg_370_pp0_iter4_reg <= icmp_ln66_1_reg_370_pp0_iter3_reg;
        icmp_ln66_1_reg_370_pp0_iter5_reg <= icmp_ln66_1_reg_370_pp0_iter4_reg;
        icmp_ln66_1_reg_370_pp0_iter6_reg <= icmp_ln66_1_reg_370_pp0_iter5_reg;
        icmp_ln66_1_reg_370_pp0_iter7_reg <= icmp_ln66_1_reg_370_pp0_iter6_reg;
        icmp_ln66_1_reg_370_pp0_iter8_reg <= icmp_ln66_1_reg_370_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        empty_24_reg_360 <= empty_24_fu_216_p1;
        first_iter_3_reg_366 <= first_iter_3_fu_220_p2;
        icmp_ln66_1_reg_370 <= icmp_ln66_1_fu_232_p2;
        select_ln65_reg_355 <= select_ln65_fu_200_p3;
        zext_ln31_cast_reg_346[8 : 0] <= zext_ln31_cast_fu_143_p1[8 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        C_block_ce0_local = 1'b1;
    end else begin
        C_block_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_fu_165_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter8_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_92;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1) & (first_iter_3_reg_366_pp0_iter2_reg == 1'd1))) begin
        gmem2_blk_n_AW = m_axi_gmem2_0_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln66_1_reg_370_pp0_iter8_reg == 1'd1))) begin
        gmem2_blk_n_B = m_axi_gmem2_0_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_grp1))) begin
        gmem2_blk_n_W = m_axi_gmem2_0_WREADY;
    end else begin
        gmem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (first_iter_3_reg_366_pp0_iter2_reg == 1'd1))) begin
        m_axi_gmem2_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem2_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln66_1_reg_370_pp0_iter8_reg == 1'd1))) begin
        m_axi_gmem2_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem2_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001_grp1))) begin
        m_axi_gmem2_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem2_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_block_address0 = zext_ln70_1_fu_306_p1;

assign C_block_ce0 = C_block_ce0_local;

assign add_ln65_1_fu_171_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 9'd1);

assign add_ln65_fu_188_p2 = (i_fu_88 + 5'd1);

assign add_ln66_fu_226_p2 = (select_ln65_fu_200_p3 + 5'd1);

assign add_ln70_fu_300_p2 = (tmp_1_fu_290_p3 + zext_ln70_fu_297_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9_grp1)) | ((m_axi_gmem2_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io_grp1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9_grp1)) | ((m_axi_gmem2_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io_grp1)));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9_grp1)) | ((m_axi_gmem2_0_WREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io_grp1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9_grp1 = ((icmp_ln66_1_reg_370_pp0_iter8_reg == 1'd1) & (m_axi_gmem2_0_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4_io_grp1 = ((m_axi_gmem2_0_AWREADY == 1'b0) & (first_iter_3_reg_366_pp0_iter2_reg == 1'd1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_24_fu_216_p1 = select_ln65_1_fu_208_p3[3:0];

assign empty_25_fu_265_p2 = (tmp1_fu_260_p2 + zext_ln31_cast_reg_346);

assign first_iter_3_fu_220_p2 = ((select_ln65_fu_200_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_165_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_232_p2 = ((add_ln66_fu_226_p2 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_194_p2 = ((j_fu_84 == 5'd16) ? 1'b1 : 1'b0);

assign m_axi_gmem2_0_ARADDR = 64'd0;

assign m_axi_gmem2_0_ARBURST = 2'd0;

assign m_axi_gmem2_0_ARCACHE = 4'd0;

assign m_axi_gmem2_0_ARID = 1'd0;

assign m_axi_gmem2_0_ARLEN = 32'd0;

assign m_axi_gmem2_0_ARLOCK = 2'd0;

assign m_axi_gmem2_0_ARPROT = 3'd0;

assign m_axi_gmem2_0_ARQOS = 4'd0;

assign m_axi_gmem2_0_ARREGION = 4'd0;

assign m_axi_gmem2_0_ARSIZE = 3'd0;

assign m_axi_gmem2_0_ARUSER = 1'd0;

assign m_axi_gmem2_0_ARVALID = 1'b0;

assign m_axi_gmem2_0_AWADDR = gmem2_addr_reg_374;

assign m_axi_gmem2_0_AWBURST = 2'd0;

assign m_axi_gmem2_0_AWCACHE = 4'd0;

assign m_axi_gmem2_0_AWID = 1'd0;

assign m_axi_gmem2_0_AWLEN = 64'd16;

assign m_axi_gmem2_0_AWLOCK = 2'd0;

assign m_axi_gmem2_0_AWPROT = 3'd0;

assign m_axi_gmem2_0_AWQOS = 4'd0;

assign m_axi_gmem2_0_AWREGION = 4'd0;

assign m_axi_gmem2_0_AWSIZE = 3'd0;

assign m_axi_gmem2_0_AWUSER = 1'd0;

assign m_axi_gmem2_0_RREADY = 1'b0;

assign m_axi_gmem2_0_WDATA = C_block_load_reg_385;

assign m_axi_gmem2_0_WID = 1'd0;

assign m_axi_gmem2_0_WLAST = 1'b0;

assign m_axi_gmem2_0_WSTRB = 4'd15;

assign m_axi_gmem2_0_WUSER = 1'd0;

assign p_cast7_fu_256_p1 = tmp_s_fu_248_p4;

assign select_ln65_1_fu_208_p3 = ((icmp_ln66_fu_194_p2[0:0] == 1'b1) ? add_ln65_fu_188_p2 : i_fu_88);

assign select_ln65_fu_200_p3 = ((icmp_ln66_fu_194_p2[0:0] == 1'b1) ? 5'd0 : j_fu_84);

assign sext_ln66_fu_280_p1 = $signed(trunc_ln2_fu_270_p4);

assign tmp1_fu_260_p2 = (p_cast7_fu_256_p1 + C);

assign tmp_1_fu_290_p3 = {{empty_24_reg_360}, {4'd0}};

assign tmp_s_fu_248_p4 = {{{empty}, {empty_24_reg_360}}, {9'd0}};

assign trunc_ln2_fu_270_p4 = {{empty_25_fu_265_p2[63:2]}};

assign zext_ln31_cast_fu_143_p1 = zext_ln31;

assign zext_ln70_1_fu_306_p1 = add_ln70_fu_300_p2;

assign zext_ln70_fu_297_p1 = select_ln65_reg_355;

always @ (posedge ap_clk) begin
    zext_ln31_cast_reg_346[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //gemm_kernel_gemm_kernel_Pipeline_WRITE_RESULT_VITIS_LOOP_66_4
